{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/filter/filter.component.ts","webpack:///src/app/components/filter/filter.component.html","webpack:///src/app/components/item/item.component.ts","webpack:///src/app/components/item/item.component.html","webpack:///src/app/components/list-header/list-header.component.ts","webpack:///src/app/components/list-header/list-header.component.html","webpack:///src/app/components/list-header/list-header.config.ts","webpack:///src/app/components/list/list.component.ts","webpack:///src/app/components/list/list.component.html","webpack:///src/app/models/list-series.model.ts","webpack:///src/app/services/get-list.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","FilterComponent","getListService","firstCounter","secondCounter","valueSeries","subscribe","data","listSeries","filterListGenres","filterListDates","inputElem","nativeElement","pipe","event","target","value","length","filterName","response","getResponse","selectedGenre","selectedDate","filterGenre","filterDate","transferData","changedResponse","filter","el","name","toLowerCase","indexOf","arrGenres","forEach","genre","item","push","listGenres","Array","from","Set","arrDates","Number","premiere","slice","sort","a","b","listDates","unshift","ItemComponent","dataSeries","listNetworks","network","ListHeaderComponent","listColumns","type","directionSort","string","sortDataByString","number","sortDataByNumber","date","sortDataByDate","columnName","arr","changeDateFormat","Date","parse","split","reverse","join","ListColumns","season","ListComponent","lowValue","highValue","getListSeries","pageIndex","pageSize","getPaginatorData","HeaderColumns","ColumnsType","GetListService","http","listSeriesUrl","valueSeries$","asObservable","get","next","list","providedIn","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'series-client-app';\n}\n","<main class=\"main\">\n  <app-filter></app-filter>\n  <app-list></app-list>\n</main>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FilterComponent } from './components/filter/filter.component';\nimport { ListComponent } from './components/list/list.component';\nimport { ListHeaderComponent } from './components/list-header/list-header.component';\nimport { ItemComponent } from './components/item/item.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    FilterComponent,\n    ListComponent,\n    ListHeaderComponent,\n    ItemComponent\n  ],\n\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatPaginatorModule,\n    BrowserAnimationsModule\n  ],\n\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime, filter, map, distinctUntilChanged } from 'rxjs/operators';\nimport { IDataSeries } from 'src/app/models/list-series.model';\nimport { GetListService } from 'src/app/services/get-list.service';\n\n@Component({\n  selector: 'app-filter',\n  templateUrl: './filter.component.html',\n  styleUrls: ['./filter.component.scss']\n})\n\nexport class FilterComponent implements OnInit {\n  @ViewChild('inputTag', { static: false }) public inputElem: ElementRef;\n\n  public searchName: string;\n  public listSeries: Array<IDataSeries>;\n  public listGenres: Array<string>;\n  public listDates: Array<any>;\n  public date: string | number;\n  public genre: string;\n\n  private response: IDataSeries[];\n  private changedResponse: IDataSeries[];\n  private firstCounter: number = 0;\n  private secondCounter: number = 0;\n  private selectedGenre: string;\n  private selectedDate: string;\n\n  constructor (private getListService: GetListService) { }\n\n  ngOnInit(): void {\n    this.getListService.valueSeries.subscribe((data: Array<IDataSeries>) => {\n      this.listSeries = data;\n      this.filterListGenres(this.listSeries);\n      this.filterListDates(this.listSeries);\n    });\n  }\n\n  public ngAfterViewInit(): void {\n    fromEvent(this.inputElem.nativeElement, 'keyup')\n      .pipe(\n        debounceTime(700),\n        map((event: InputEvent) => (<HTMLInputElement>event.target).value),\n        filter(value => value.length > 2 || value.length === 0),\n        distinctUntilChanged(),\n      )\n      .subscribe(value => {\n        this.filterName(value);\n      });\n  }\n\n  public filter(value: string, id: string) {\n    let response = this.getListService.getResponse();\n\n    id === \"genre\" ? this.selectedGenre = value : this.selectedDate = value;\n\n    response = this.filterGenre(this.selectedGenre, response);\n    response = this.filterDate(this.selectedDate, response);\n\n    this.getListService.transferData(response);\n  }\n\n  private filterName(value: string) {\n    this.response = this.getListService.getResponse();\n    if (!value) {\n      this.changedResponse = this.response;\n    } else {\n      this.changedResponse = this.response.filter(\n        (el) => el.name.toLowerCase().indexOf(value.toLowerCase()) >= 0\n      );\n    }\n    this.getListService.transferData(this.changedResponse);\n  }\n\n  private filterListGenres(value: Array<IDataSeries>) {\n    if (this.firstCounter > 1) return;\n    let arrGenres: Array<string> = [ \"All genres\" ];\n    value.forEach(el => el.genre.forEach(item => arrGenres.push(item)));\n    this.listGenres = Array.from(new Set(arrGenres));\n    this.selectedGenre = this.listGenres[0];\n    this.firstCounter++;\n  }\n\n  private filterListDates(value: Array<IDataSeries>) {\n    if (this.secondCounter > 1) return;\n    let arrDates: Array<any> = [];\n    value.forEach(el => arrDates.push(Number(el.premiere.slice(-4))));\n    arrDates.sort((a, b) => a - b);\n    this.listDates = Array.from(new Set(arrDates));\n    this.listDates.unshift(\"All dates\");\n    this.selectedDate = this.listDates[0];\n    this.secondCounter++;\n  }\n\n  private filterGenre(value: string, response: IDataSeries[]): IDataSeries[] {\n    return value === \"All genres\" ?\n      response : response.filter((el) => el.genre.indexOf(value) >= 0);\n  }\n\n  private filterDate(value: string, response: IDataSeries[]): IDataSeries[] {\n    return value === \"All dates\" ?\n      response : response.filter((el) => el.premiere.indexOf(value) >= 0);\n  }\n}\n","<div class=\"form-name filter\">\n  <input type=\"text\" #inputTag class=\"form-field\" placeholder=\"Name\" name=\"name\" [(ngModel)]=\"searchName\">\n  <i class=\"fas fa-search\"></i>\n</div>\n\n<div class=\"box-select filter\">\n    <select id=\"genre\" class=\"select\" (change)=\"filter($event.target.value, $event.target.id)\" >\n    <option class=\"option\" *ngFor=\"let genre of listGenres\">{{ genre }}</option>\n  </select>\n  <div class=\"select-arrow\"></div>\n</div>\n\n<div class=\"box-select filter\">\n  <select id=\"date\" class=\"select\" (change)=\"filter($event.target.value, $event.target.id)\" >\n    <option *ngFor=\"let date of listDates\">{{ date }}</option>\n  </select>\n  <div class=\"select-arrow\"></div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { IDataSeries } from 'src/app/models/list-series.model';\n\n@Component({\n  selector: 'app-item',\n  templateUrl: './item.component.html',\n  styleUrls: ['./item.component.scss']\n})\n\nexport class ItemComponent implements OnInit {\n  @Input() public dataSeries: IDataSeries;\n\n  public listGenres: Array<string>;\n  public listNetworks: Array<string>;\n  public genre: string;\n  public network: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.listGenres = this.dataSeries.genre;\n    this.listNetworks = this.dataSeries.network;\n  }\n}\n","<div class=\"box-name-genres column\">\n  <div class=\"series-name\">{{ dataSeries.name }}</div>\n  <div class=\"box-genres\">\n    <span class=\"list-values genre\" *ngFor=\"let genre of listGenres\" [ngClass]=\"genre\">{{ genre }}</span>\n  </div>\n</div>\n<div class=\"series-season column\">{{ dataSeries.season }}</div>\n<div class=\"series-networks column\">\n  <span class=\"list-values\" *ngFor=\"let network of listNetworks\">{{ network }}</span>\n</div>\n<div class=\"series-premiere column\">{{ dataSeries.premiere }}</div>\n","import { Component, OnInit } from '@angular/core';\nimport { IDataSeries, HeaderColumns, ColumnsType, IListColumns } from 'src/app/models/list-series.model';\nimport { GetListService } from 'src/app/services/get-list.service';\nimport { ListColumns } from './list-header.config';\n\n@Component({\n  selector: 'app-list-header',\n  templateUrl: './list-header.component.html',\n  styleUrls: ['./list-header.component.scss']\n})\n\nexport class ListHeaderComponent implements OnInit {\n  public listColumns: IListColumns[] = ListColumns;\n  private listSeries: IDataSeries[];\n\n  constructor (private getListService: GetListService) { }\n\n  ngOnInit(): void {\n    this.getListService.valueSeries.subscribe((data: Array<IDataSeries>) => {\n      this.listSeries = data;\n    });\n  }\n\n  public sortData(type: ColumnsType, name: HeaderColumns, directionSort: string): void {\n    let changedResponse: IDataSeries[];\n\n    if (type === ColumnsType.string) {\n      changedResponse = this.sortDataByString(name, directionSort, this.listSeries);\n    }\n    else if (type === ColumnsType.number) {\n      changedResponse = this.sortDataByNumber(name, directionSort, this.listSeries);\n    }\n    else if (type === ColumnsType.date) {\n      changedResponse = this.sortDataByDate(name, directionSort, this.listSeries);\n    }\n\n    this.getListService.transferData(changedResponse);\n  }\n\n  private sortDataByString(columnName: HeaderColumns, directionSort: string, arr: IDataSeries[]): IDataSeries[] {\n    return arr.sort((a, b) => {\n      if (directionSort === \"up\") {\n        return a[columnName] > b[columnName] ? 1 : -1;\n      }\n      if (directionSort === \"down\") {\n        return a[columnName] > b[columnName] ? -1 : 1;\n      };\n    });\n  }\n\n  private sortDataByNumber(columnName: HeaderColumns, directionSort: string, arr: IDataSeries[]): IDataSeries[] {\n    return arr.sort((a, b) => {\n      if (directionSort === \"up\") {\n        return Number(a[columnName]) - Number(b[columnName]);\n      }\n      if (directionSort === \"down\") {\n        return Number(b[columnName]) - Number(a[columnName]);\n      };\n    });\n  }\n\n  private sortDataByDate(columnName: HeaderColumns, directionSort: string, arr: IDataSeries[]): IDataSeries[] {\n    return arr.sort((a, b) => {\n      if (directionSort === \"up\") {\n        return this.changeDateFormat(a[columnName] as string) >\n        this.changeDateFormat(b[columnName] as string) ? 1 : -1;\n      }\n      if (directionSort === \"down\") {\n        return this.changeDateFormat(a[columnName] as string) >\n        this.changeDateFormat(b[columnName] as string) ? -1 : 1;\n      };\n    });\n  }\n\n  private changeDateFormat(date: string) {\n    return Date.parse(date.split(\".\").reverse().join('-'));\n  }\n}\n","<div class=\"column-header\" *ngFor=\"let column of listColumns\" [ngClass]=\"column.class\">\n  <span>{{ column.name | titlecase }}</span>\n  <span class=\"sort-arrow\">\n    <i class=\"fas fa-angle-up\" (click)=\"sortData(column.type, column.name, 'up')\"></i>\n    <i class=\"fas fa-angle-down\" (click)=\"sortData(column.type, column.name, 'down')\"></i>\n  </span>\n</div>\n","import { IListColumns, HeaderColumns, ColumnsType } from 'src/app/models/list-series.model';\r\n\r\nexport const ListColumns: IListColumns[] = [\r\n  {\r\n    name: HeaderColumns.name,\r\n    class: `col-${HeaderColumns.name}`,\r\n    type: ColumnsType.string,\r\n  },\r\n  {\r\n    name: HeaderColumns.season,\r\n    class: `col-${HeaderColumns.season}`,\r\n    type: ColumnsType.number,\r\n  },\r\n  {\r\n    name: HeaderColumns.network,\r\n    class: `col-${HeaderColumns.network}`,\r\n    type: ColumnsType.string,\r\n  },\r\n  {\r\n    name: HeaderColumns.premiere,\r\n    class: `col-${HeaderColumns.premiere}`,\r\n    type: ColumnsType.date,\r\n  },\r\n]\r\n","import { Component, OnInit } from '@angular/core';\nimport { IDataSeries } from 'src/app/models/list-series.model';\nimport { GetListService } from 'src/app/services/get-list.service';\nimport { PageEvent } from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\n\nexport class ListComponent implements OnInit {\n  public dataItem: IDataSeries;\n  public listSeries: Array<IDataSeries>;\n  public lowValue: number = 0;\n  public highValue: number = 10;\n\n  constructor(private getListService: GetListService) { }\n\n  public ngOnInit(): void {\n    this.getListService.getListSeries();\n    this.getListService.valueSeries.subscribe((data: Array<IDataSeries>) => {\n      this.listSeries = data;\n    });\n  }\n\n  public getPaginatorData(event: PageEvent): PageEvent {\n    this.lowValue = event.pageIndex * event.pageSize;\n    this.highValue = this.lowValue + event.pageSize;\n    return event;\n  }\n}\n","<app-list-header></app-list-header>\n<app-item *ngFor=\"let dataItem of (listSeries | slice: lowValue : highValue)\" [dataSeries]=\"dataItem\">\n</app-item>\n<mat-paginator [length]=\"listSeries.length\" pageSize=10 (page)=\"getPaginatorData($event)\"\n  [pageSizeOptions]=\"[5, 10, 25]\" showFirstLastButtons=\"true\">\n</mat-paginator>\n","export interface IListSeries {\n  list: Array<IDataSeries>;\n}\n\nexport interface IDataSeries {\n  name: string;\n  genre: Array<string>;\n  season: number;\n  network: Array<string>,\n  premiere: string;\n}\n\nexport interface IListColumns {\n  name: HeaderColumns;\n  class: string;\n  type: ColumnsType;\n}\n\nexport enum HeaderColumns {\n  name = \"name\",\n  season = \"season\",\n  network = \"network\",\n  premiere = \"premiere\"\n}\n\nexport enum ColumnsType {\n  string,\n  number,\n  date\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\nimport { IDataSeries, IListSeries } from 'src/app/models/list-series.model';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class GetListService {\n  private listSeriesUrl: string = 'assets/series.json';\n  public response: IDataSeries[];\n  public valueSeries$: BehaviorSubject<Array<IDataSeries>> = new BehaviorSubject<Array<IDataSeries>>([]);\n  public valueSeries: Observable<Array<IDataSeries>> = this.valueSeries$.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  public getListSeries(): void {\n    this.http.get(this.listSeriesUrl).subscribe((data: IListSeries) => {\n      this.valueSeries$.next(data.list);\n      this.response = data.list;\n    });\n  }\n\n  public getResponse(): IDataSeries[] {\n    return this.response;\n  }\n\n  public transferData(value: Array<IDataSeries>): void {\n    this.valueSeries$.next(value);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}